// @ts-check

/** @type {import("eslint").Linter.Config} */
const config = {
  $schema: 'https://json.schemastore.org/eslintrc',
  extends: ['turbo', 'plugin:@typescript-eslint/recommended', 'plugin:@typescript-eslint/recommended-requiring-type-checking', 'prettier'],
  env: {
    es2022: true,
    node: true,
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: true,
  },
  plugins: ['@typescript-eslint', 'import', 'only-warn'],
  rules: {
    '@typescript-eslint/restrict-template-expressions': 'error',
    '@next/next/no-html-link-for-pages': 'off',
    // don't allow unused variables unless they begin with an underscore
    '@typescript-eslint/no-unused-vars': [
      'error',
      {
        vars: 'all',
        args: 'after-used',
        ignoreRestSiblings: false,
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
      },
    ],
    '@typescript-eslint/consistent-type-imports': [
      'error',
      { prefer: 'type-imports', fixStyle: 'inline-type-imports', disallowTypeAnnotations: false },
    ],
    '@typescript-eslint/no-shadow': ['error'],
    'import/no-anonymous-default-export': 'warn',
    '@typescript-eslint/no-non-null-assertion': ['error'],
    '@typescript-eslint/no-misused-promises': ['error'],
    '@typescript-eslint/no-floating-promises': ['error'],
    '@typescript-eslint/unbound-method': 'off',
    '@typescript-eslint/array-type': [
      'error',
      {
        default: 'array',
        readonly: 'array',
      },
    ],
    'no-return-await': 'off',
    '@typescript-eslint/require-await': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/restrict-plus-operands': 'off',
    '@typescript-eslint/no-unsafe-assignment': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    'no-unused-vars': 'off',
    camelcase: 'off',
    '@typescript-eslint/camelcase': 'off',
    '@typescript-eslint/no-use-before-define': ['error', { functions: false, typedefs: false }],
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/no-require-imports': 2,
    '@typescript-eslint/prefer-for-of': 2,
    'no-loop-func': 'off',
    '@typescript-eslint/no-loop-func': ['error'],
    complexity: 'off',
    'standard/no-callback-literal': 0,
    radix: ['error', 'always'],
    'no-cond-assign': ['error', 'always'],
    eqeqeq: ['error', 'always'],
    'no-throw-literal': 'off',
    '@typescript-eslint/no-throw-literal': ['error'],
    '@typescript-eslint/no-unsafe-return': ['error'],
    '@typescript-eslint/prefer-nullish-coalescing': ['error'],
    '@typescript-eslint/strict-boolean-expressions': 'off',
    'no-restricted-globals': ['error', 'event', 'length', 'name', 'status', 'top'],
  },
  ignorePatterns: [
    '**/.eslintrc.cjs',
    '**/*.config.js',
    '**/*.config.cjs',
    'packages/config/**',
    'turbowatch.*.ts',
    '.swc',
    '.turbo',
    '.vscode',
    '.next',
    'dist',
    '.eslintrc.js',
    'schema.generated.ts',
    'pnpm-lock.yaml',
  ],
  reportUnusedDisableDirectives: true,
}

module.exports = config
